
// 获取分支名称
def BranchName(branch) {
    if(branch) {
        return branch.replaceAll("origin/", "")
    }
    return ""
}

pipeline {
    agent any

    environment {

        CREDENTIALS_ID = "8afd47f2-cf1e-4df0-87fd-8c1331ed1212"

        //表单配置
        GIT_URL_SURVEY = "http://ssm.ebmsz.com/zhyx/alpha/code/web/zhyx-form-admin.git"
        DEPLOY_PATH_SURVEY = "/data/deploy/zhyx-form-admin_web"
        CONFIG_NAME_SURVEY = "诊后预问诊开发环境"

        EXEC_COMMAND_PATH_SURVEY = "/data/deploy/zhyx-form-admin_web/deploy.sh"
        REMOTE_DIRECTORY_PATH_SURVEY = "deploy/zhyx-form-admin_web"
        REMOVE_PREFIX_PATH_SURVEY = ""
        SOURCE_FILES_PATH_SURVEY = "dist.tar.gz"

        //表单医生端配置
        GIT_URL_SURVEY_DOC = "http://ssm.ebmsz.com/zhyx/alpha/code/web/zhyx-form-hospital.git"
        DEPLOY_PATH_SURVEY_DOC = "/data/deploy/zhyx-form-hospital_web"
        CONFIG_NAME_SURVEY_DOC = "诊后预问诊开发环境"

        EXEC_COMMAND_PATH_SURVEY_DOC = "/data/deploy/zhyx-form-hospital_web/deploy.sh"
        REMOTE_DIRECTORY_PATH_SURVEY_DOC = "deploy/zhyx-form-hospital_web"
        REMOVE_PREFIX_PATH_SURVEY_DOC = ""
        SOURCE_FILES_PATH_SURVEY_DOC = "dist.tar.gz"

        // 发布流程
        STEP_LIST = "survey_web_build,survey_web_deploy,survey_doc_web_build,survey_doc_web_deploy"
        STEP_DESC_LIST = "表单前端打包,表单前端发布,表单医生端前端打包,表单医生端前端发布"


    }

    parameters {
        gitParameter branch: '', branchFilter: 'origin/(.*)', defaultValue: 'origin/master', description: '表单分支', name: 'branch_survey', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH'
        gitParameter branch: '', branchFilter: 'origin/(.*)', defaultValue: 'origin/master', description: '表单医生端分支', name: 'branch_survey_doc', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH'
        extendedChoice defaultValue: "survey_web_build,survey_web_deploy,survey_doc_web_build,survey_doc_web_deploy", description: '流程发布', descriptionPropertyValue: "表单前端打包,表单前端发布,表单医生端前端打包,表单医生端前端发布", multiSelectDelimiter: ',', name: 'steps', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_CHECKBOX', value: "survey_web_build,survey_web_deploy,survey_doc_web_build,survey_doc_web_deploy", visibleItemCount: 5
    }

    options {
        timestamps()
        //禁用Jenkins同时执行多次该pipeline
        disableConcurrentBuilds()
        //pipeline运行超时时间
        timeout(time: 20, unit: 'MINUTES')
        //保留最近历史构建记录的数量
        buildDiscarder(logRotator(numToKeepStr: '5'))
        //重试次数
        retry(3)
    }

    stages {

        // 表单前端部署
        stage('Survey web build.') {
            when {
                expression { params.steps.contains("survey_web_build")}
            }
            steps {
                script {
                    branch = BranchName("${params.branch_survey}")
                    echo "当前选择分支: ${branch}"
                }

                sh '''
                    # 判断工作目录是否存在,不存在则创建
                    if [ ! -d ${DEPLOY_PATH_SURVEY} ]; then
                      mkdir ${DEPLOY_PATH_SURVEY}
                    fi

                '''

                dir(DEPLOY_PATH_SURVEY) {
                    // Get some code from a GitHub repository
                    git branch: "${branch}", credentialsId: CREDENTIALS_ID, url: GIT_URL_SURVEY

                    sh """
                        echo $PATH
                        node -v
                        npm -v

                        # 项目编译
                        npm install
                        npm run build

                        # 压缩包
                        echo "=====开始打包dist..."
                        # tar -zcvf dist.tar.gz --exclude=h5_config.js dist/*

                    """
                }

            }
            post {
                success {
                   echo 'Survey web build success!'
                }
            }
        }

        stage('Survey web deploy.') {
            when {
                expression { params.steps.contains("survey_web_deploy")}
            }
            steps {
                // 发布需要的入参
                script {
                    configName = CONFIG_NAME_SURVEY
                    execCommand = EXEC_COMMAND_PATH_SURVEY
                    remoteDirectory = REMOTE_DIRECTORY_PATH_SURVEY
                    removePrefix = REMOVE_PREFIX_PATH_SURVEY
                    sourceFiles = SOURCE_FILES_PATH_SURVEY
                }

                dir(DEPLOY_PATH_SURVEY) {
                    sshPublisher(publishers: [sshPublisherDesc(configName: "${configName}", transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "${execCommand}", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "${remoteDirectory}", remoteDirectorySDF: false, removePrefix: "${removePrefix}", sourceFiles: "${sourceFiles}")], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
                }


            }
            post {
                success {
                   echo 'Survey web deploy success!'
                }
            }

        }


        // 表单医生端前端部署
        stage('Survey doctor manage web build.') {
            when {
                expression { params.steps.contains("survey_doc_web_build")}
            }
            steps {
                script {
                    branch = BranchName("${params.branch_survey_doc}")
                    echo "当前选择分支: ${branch}"
                }

                sh '''
                    # 判断工作目录是否存在,不存在则创建
                    if [ ! -d ${DEPLOY_PATH_SURVEY_DOC} ]; then
                      mkdir ${DEPLOY_PATH_SURVEY_DOC}
                    fi

                '''

                dir(DEPLOY_PATH_SURVEY_DOC) {
                    // Get some code from a GitHub repository
                    git branch: "${branch}", credentialsId: CREDENTIALS_ID, url: GIT_URL_SURVEY_DOC

                    sh "mvn clean package -pl manage-admin -am  -P ${PACKAGE_ENV} -Dmaven.test.skip=true"
                }

            }
            post {
                success {
                   echo 'Survey doctor manage web build success!'
                }
            }
        }

        stage('Survey doctor manage web deploy.') {
            when {
                expression { params.steps.contains("survey_doc_web_deploy")}
            }
            steps {
                // 发布需要的入参
                script {
                    configName = CONFIG_NAME_SURVEY_DOC
                    execCommand = EXEC_COMMAND_PATH_SURVEY_DOC
                    remoteDirectory = REMOTE_DIRECTORY_PATH_SURVEY_DOC
                    removePrefix = REMOVE_PREFIX_PATH_SURVEY_DOC
                    sourceFiles = SOURCE_FILES_PATH_SURVEY_DOC
                }

               dir(DEPLOY_PATH_SURVEY_DOC) {
                   sshPublisher(publishers: [sshPublisherDesc(configName: "${configName}", transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "${execCommand}", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "${remoteDirectory}", remoteDirectorySDF: false, removePrefix: "${removePrefix}", sourceFiles: "${sourceFiles}")], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
               }

            }
            post {
                success {
                   echo 'Survey doctor manage web deploy success!'
                }
            }

        }



    }



}
